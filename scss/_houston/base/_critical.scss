//  ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****  //
//  ***** ***** *****                                     ***** ***** *****  //
//  ***** ***** *****              CRITICAL               ***** ***** *****  //
//  ***** ***** *****                                     ***** ***** *****  //
//  ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****  //

//  These mixins/functions are critial to the running of this boilerplate.
//  Remove any of these and expect to have a bad day. If you really want to
//  know whats going on, keep reading:
//
//  [_1_] POW
//  [_2_] EXPLODE A STRING


//  ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****  //


//  [_1_] POW  //

//  Similar to the compass pow() function, this adds the ability to find the
//  power of an integer - it's used primarily in finding the correct typescale
//  and baselines.

@function pow($x, $n) {
  $ret: 1;

  @if $n >= 0 {
    @for $i from 1 through $n {
      $ret: $ret * $x;
    }
  } @else {
    @for $i from $n to 0 {
      $ret: $ret / $x;
    }
  }

  @return $ret;
}


//  ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****  //


//  [_1_] EXPLODE A STRING  //

//  Ronseal moment. This little beauty (adapted from Hugo Grundel) can explode
//  a string just like php. It's used here primarily to interpret the column
//  structure for each grid.

@function explode($string, $delimiter: '', $separator: "space") {
  @if type-of($string) != "string" {
    @warn "`sl-explode` function expecting a string; #{type-of($string)} given.";
    @return null;
  }

  @if type-of($delimiter) != "string" {
    @warn "`sl-explode` function expecting a string; #{type-of($delimiter)} given.";
    @return null;
  }

  $result: ();
  $length: str-length($string);

  @if not index("space" "comma", $separator) {
    $separator: "space";
  }

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $running: true;
  $remaining: $string;

  @while $running {
    $index: str-index($remaining, $delimiter);

    @if not $index {
      $running: false;
    }

    @else {
      $slice: str-slice($remaining, 1, $index - 1);
      $result: append($result, $slice, $separator);
      $remaining: str-slice($remaining, $index + str-length($delimiter));
    }
  }

  @return append($result, $remaining, $separator);
}


//  ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****  //
